let s:is_windows = has('win32') || has('win64')
let s:is_cygwin = has('win32unix')
let s:is_macvim = has('gui_macvim')

let NERDSpaceDelims=1     "Extra space around delimiters when commenting
set history=1000          "Longer history

" lets you see what your other options are when Pressing <TAB> in command mode
set wildmenu
" set wildmode=list:longest

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" ================ Color Scheme =====================
" set background=dark
" color solarized
color molokai

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowb

" ================ Scrolling ========================
set scrolloff=1         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=7
set sidescroll=1

" ================ Folds ============================
" set foldmethod=indent   "fold based on indent
" set nofoldenable        "dont fold by default
" set foldnestmax=3       "deepest fold is 3 levels

" List chars
set list                          " Show invisible characters
set listchars=""                  " Reset the listchars
set listchars=tab:·\              " a tab should display as "· ", trailing whitespace as "."
set listchars+=trail:•            " show trailing spaces as dots
set listchars+=extends:»          " The character to show in the last column when wrap is
" off and the line continues beyond the right of the screen
set listchars+=precedes:«         " The character to show in the last column when wrap is
" off and the line continues beyond the right of the screen


" remove trailing whitespace on save.
" http://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim/1618401#1618401
fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,js,scss,css autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
" command to strip white space from any file
nnoremap <leader>s :call <SID>StripTrailingWhitespaces()<cr>

" === Key mapping {{{
  " smash escape
  inoremap jk <esc>
  inoremap kj <esc>

  " Make Control-direction switch between windows (like C-W h, etc)
  nmap <silent> <C-k> <C-W><C-k>
  nmap <silent> <C-j> <C-W><C-j>
  nmap <silent> <C-h> <C-W><C-h>
  nmap <silent> <C-l> <C-W><C-l>

  " change cursor position in insert mode
  inoremap <C-h> <left>
  inoremap <C-l> <right>

  " sane regex {{{
    " http://learnvimscriptthehardway.stevelosh.com/chapters/31.html
    nnoremap / /\v
    vnoremap / /\v
    nnoremap ? ?\v
    vnoremap ? ?\v
    cnoremap s/ s/\v
  "}}}

  " show fold level {{{
    nnoremap zr zr:echo &foldlevel<cr>
    nnoremap zm zm:echo &foldlevel<cr>
    nnoremap zR zR:echo &foldlevel<cr>
    nnoremap zM zM:echo &foldlevel<cr>
  " }}}

  " auto center {{{
    nnoremap <silent> n nzz
    nnoremap <silent> N Nzz
    nnoremap <silent> * *zz
    nnoremap <silent> # #zz
    nnoremap <silent> g* g*zz
    nnoremap <silent> g# g#zz
    nnoremap <silent> <C-o> <C-o>zz
    nnoremap <silent> <C-i> <C-i>zz
  "}}}

" }}}

" === Plugins {{{
  " tomtom/tcomment_vim {{{
    map <D-/> gccj
    vmap <D-/> gc
    imap <D-/> <Esc>gccj
  " }}}

  " scrooloose/nerdtree {{{
    nnoremap <F2> :NERDTreeToggle<CR>
    nnoremap <F3> :NERDTreeFind<CR>
  " }}}

  " kien/ctrlp {{{
    " ignore npm and bower directories for ctrlp
    let g:ctrlp_custom_ignore = {
          \ 'dir': '\v[\/](node_modules|bower_components)$'
          \ }
    " hide statusline in ctrlp buffer
    let g:ctrlp_buffer_func = {
          \ 'enter': 'HideStatusLine',
          \ 'exit':  'ShowStatusLine',
          \ }

    func! HideStatusLine()
      set laststatus=0
    endfunc

    func! ShowStatusLine()
      set laststatus=2
    endfunc
  " }}}

" === }}}

