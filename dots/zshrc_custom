# Things I don't want to publish to github
[[ -s "$HOME/.zshrc_secrets" ]] && source "$HOME/.zshrc_secrets"

# Give me my bash style incremental search
bindkey "^R" history-incremental-search-backward
# bindkey "^E" history-incremental-search-forward

alias show_hidden="defaults write com.apple.finder AppleShowAllFiles TRUE && killall Finder"
alias hide_hidden="defaults write com.apple.finder AppleShowAllFiles FALSE && killall Finder"
alias dokku='$HOME/.dokku/contrib/dokku_client.sh'
alias bower='noglob bower'
# alias nvim='reattach-to-user-namespace -l nvim'
alias vim='nvim'
alias vi='nvim'
alias mux='tmuxinator'
alias muxx='tmuxinator w'
alias hidden="ls -dF .*"

# # Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Postgres
export PGHOST=localhost

# Bundle open gem
export BUNDLER_EDITOR=nvim

# JAVA SDK
export JAVA_HOME=$(/usr/libexec/java_home)

# rails 4 secret key for production
export SECRET_KEY_BASE='5ca4aafaf356e2961b81e67fa69bea64e7be87d75c0aec8e1bf15b8abf1edf019e791b535eb338f0f99f0fc0d5969dff0963dd5e370706b5471619981f2a0dc7'

# Quoine
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export DOCKER_HOST='tcp://192.168.59.103:2376'
export DOCKER_CERT_PATH=/Users/huynh/.boot2docker/certs/boot2docker-vm
export DOCKER_TLS_VERIFY=1

export JAVA_HOME="$(/usr/libexec/java_home)"

export GOPATH=$HOME/go
export PATH=$PATH:/usr/local/opt/go/libexec/bin

export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/bin
export ANDROID_HOME=/Users/$USER/Library/Android/sdk
export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools


export NVM_DIR="$HOME/.nvm"
export NVM_BREW="/usr/local/opt/nvm/"

#Lazy load nvm
nvm() {
  init_nvm
  nvm "$@"
}

node() {
  init_nvm
  node "$@"
}

npm() {
  init_nvm
  npm "$@"
}

export PATH="/usr/local/sbin:$PATH"
export PATH="$PATH:$HOME/bin"
export PATH="./bin:$PATH"
export PATH="$HOME/.rbenv/bin:$PATH"

# export PATH="`yarn global bin`:$PATH"

eval "$(rbenv init -)"

init_nvm() {
  unset -f nvm
  unset -f node
  unset -f npm
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

  autoload -U add-zsh-hook
  load-nvmrc() {
    local node_version="$(nvm version)"
    local nvmrc_path="$(nvm_find_nvmrc)"

    if [ -n "$nvmrc_path" ]; then
      local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

      if [ "$nvmrc_node_version" = "N/A" ]; then
        nvm install
      elif [ "$nvmrc_node_version" != "$node_version" ]; then
        nvm use
      fi
    elif [ "$node_version" != "$(nvm version default)" ]; then
      echo "Reverting to nvm default version"
      nvm use default
    fi
  }
  add-zsh-hook chpwd load-nvmrc
  load-nvmrc
}


export PATH="./node_modules/.bin:$PATH"
if [ -f ~/.zshrc_local ]; then
    source ~/.zshrc_local
fi
