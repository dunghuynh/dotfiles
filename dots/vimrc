set nocompatible               " be iMproved
let mapleader = ','            " Change leader key from \ to ,
let maplocalleader = ','       " Change leader key from \ to ,
set timeoutlen=500           " Time to wait after ESC (default 1000 causes an annoying delay)
let g:mapleader = ','

" ================detect OS {{{
  let s:is_windows = has('win32') || has('win64')
  let s:is_cygwin = has('win32unix')
  let s:is_macvim = has('gui_macvim')
" ================ }}}

" Based on https://github.com/bling/dotvim
" ================ functions {{{
  function! Preserve(command) "{{{
    " preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " do the business:
    execute a:command
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
  endfunction "}}}
  function! StripTrailingWhitespace() "{{{
    call Preserve("%s/\\s\\+$//e")
  endfunction "}}}
  function! EnsureExists(path) "{{{
    if !isdirectory(expand(a:path))
      call mkdir(expand(a:path))
    endif
  endfunction "}}}
  function! CloseWindowOrKillBuffer() "{{{
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " never bdelete a nerd tree
    if matchstr(expand("%"), 'NERD') == 'NERD'
      wincmd c
      return
    endif

    if number_of_windows_to_this_buffer > 1
      wincmd c
    else
      bdelete
    endif
  endfunction "}}}
" ================ }}}

" ================ Setting {{{
  let s:settings = {}
  let s:settings.default_indent = 2
  let s:settings.max_column = 120
  let s:settings.autocomplete_method = 'neocomplcache'
  let s:settings.colorscheme = 'molokai'
  if has('lua')
    let s:settings.autocomplete_method = 'neocomplete'
  elseif filereadable(expand("~/.vim/bundle/YouCompleteMe/python/ycm_core.*"))
    let s:settings.autocomplete_method = 'ycm'
  endif

  let s:settings.plugin_groups = []
  call add(s:settings.plugin_groups, 'core')
  call add(s:settings.plugin_groups, 'language')
  call add(s:settings.plugin_groups, 'javascript')
  call add(s:settings.plugin_groups, 'ruby')
  " call add(s:settings.plugin_groups, 'python')
  call add(s:settings.plugin_groups, 'scm')
  call add(s:settings.plugin_groups, 'editing')
  call add(s:settings.plugin_groups, 'visual')
  call add(s:settings.plugin_groups, 'indents')
  call add(s:settings.plugin_groups, 'navigation')
  call add(s:settings.plugin_groups, 'unite')
  call add(s:settings.plugin_groups, 'autocomplete')
  call add(s:settings.plugin_groups, 'misc')
  if s:is_windows
    call add(s:settings.plugin_groups, 'windows')
  endif

" ================ }}}

" ============================= NeoBundle {{{

  if has('vim_starting')
    set runtimepath+=~/.vim/bundle/neobundle.vim/
  endif

  call neobundle#rc(expand('~/.vim/bundle/'))

  " Let NeoBundle manage NeoBundle
  NeoBundleFetch 'Shougo/neobundle.vim'

  " Recommended to install
  " After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile
  NeoBundleDepends 'Shougo/vimproc', {
        \ 'build' : {
        \     'windows' : 'make -f make_mingw32.mak',
        \     'cygwin' : 'make -f make_cygwin.mak',
        \     'mac' : 'make -f make_mac.mak',
        \     'unix' : 'make -f make_unix.mak',
        \    },
        \ }

" ======== }}}

" ================ Plugin Groups {{{
  if count(s:settings.plugin_groups, 'core') "{{{
    " NeoBundle 'matchit.zip'
    " NeoBundle 'bling/vim-bufferline' "{{{
    "   let g:bufferline_echo=0
    "   let g:bufferline_rotate=1
    " "}}}
    NeoBundle 'bling/vim-airline' "{{{
      " powerline symbols
      let g:airline_left_sep = ''
      let g:airline_right_sep = ''
      let g:airline_fugitive_prefix = ' '
      let g:airline_readonly_symbol = ''
      let g:airline_linecolumn_prefix = ' '
    "}}}
    NeoBundle 'tpope/vim-repeat'
    NeoBundle 'tpope/vim-dispatch'
    NeoBundle 'tpope/vim-eunuch'
    NeoBundle 'tpope/vim-unimpaired' "{{{
      nmap <c-up> [e
      nmap <c-down> ]e
      vmap <c-up> [egv
      vmap <c-down> ]egv
    "}}}

    " Vim-surround
    " press cs'<b> to change 'hello' to <b>hello</b>
    NeoBundle 'tpope/vim-surround'

    " NeoBundle 'Rename2' "{{{
    "   " :Rename new_file_name.txt
    " "}}}

    " Align
    " NeoBundle 'tsaleh/vim-align'

    " Ack
    " NeoBundle 'ack.vim'
    " map <D-F> :Ack<space>
    " noremap <LocalLeader># "ayiw:Ack <C-r>a<CR>
    " vnoremap <LocalLeader># "ay:Ack <C-r>a<CR>

    " ag: The Silver Searcher
    " NeoBundle 'rking/ag.vim'
    " let g:ackprg = 'ag --nogroup --nocolor --column'
    " map <D-F> :Ag -i<space>
    " noremap <LocalLeader># "ayiw:Ag <C-r>a<CR>
    " vnoremap <LocalLeader># "ay:Ag <C-r>a<CR>

  endif "}}}

  if count(s:settings.plugin_groups, 'language') "{{{
    NeoBundleLazy 'groenewege/vim-less', {'autoload':{'filetypes':['less']}}
    NeoBundleLazy 'cakebaker/scss-syntax.vim', {'autoload':{'filetypes':['scss','sass']}}
    NeoBundleLazy 'hail2u/vim-css3-syntax', {'autoload':{'filetypes':['css','scss','sass']}}
    NeoBundleLazy 'ap/vim-css-color', {'autoload':{'filetypes':['css','scss','sass','less','styl']}}
    NeoBundleLazy 'othree/html5.vim', {'autoload':{'filetypes':['html']}}
    NeoBundleLazy 'juvenn/mustache.vim', {'autoload':{'filetypes':['mustache']}}
    NeoBundleLazy 'slim-template/vim-slim', {'autoload':{'filetypes':['slim']}}
    NeoBundleLazy 'tpope/vim-haml', {'autoload':{'filetypes':['haml']}}
    NeoBundleLazy 'tpope/vim-git'
    NeoBundleLazy 'gregsexton/MatchTag', {'autoload':{'filetypes':['html','xml']}}
    NeoBundleLazy 'tpope/vim-cucumber', {'autoload':{'filetypes':['feature']}}
    NeoBundleLazy 'tpope/vim-markdown', {'autoload':{'filetypes':['markdown', 'md']}}
    " if executable('redcarpet') && executable('instant-markdown-d')
    "   NeoBundleLazy 'suan/vim-instant-markdown', {'autoload':{'filetypes':['markdown', 'md']}}
    " endif

    " NodeJS
    " NeoBundleLazy 'wavded/vim-stylus', {'autoload':{'filetypes':['styl']}}
    " NeoBundleLazy 'digitaltoad/vim-jade', {'autoload':{'filetypes':['jade']}}
 
    " NeoBundleLazy 'mattn/zencoding-vim', {'autoload':{'filetypes':['html','xml','xsl','xslt','xsd','css','sass','scss','less','mustache']}} "{{{
      " autocmd FileType html,xml,xsl,xslt,xsd,css,sass,scss,less,mustache imap <buffer><tab> <c-y>,
    " "}}}

    " NeoBundleLazy 'nono/vim-handlebars'
    " NeoBundleLazy 'jnwhiteh/vim-golang', {'autoload':{'filetypes':['go']}}
  endif "}}}

  if count(s:settings.plugin_groups, 'javascript') "{{{
    " NeoBundleLazy 'teramako/jscomplete-vim', {'autoload':{'filetypes':['javascript']}} "{{{
    "   autocmd FileType javascript setlocal omnifunc=jscomplete#CompleteJS
    " "}}}
    NeoBundleLazy 'pangloss/vim-javascript', {'autoload':{'filetypes':['javascript']}}
    " NeoBundleLazy 'maksimr/vim-jsbeautify', {'autoload':{'filetypes':['javascript']}} "{{{
    "   nnoremap <leader>fjs :call JsBeautify()<cr>
    " "}}}
    " NeoBundleLazy 'leafgarland/typescript-vim', {'autoload':{'filetypes':['typescript']}}
    NeoBundleLazy 'kchmck/vim-coffee-script', {'autoload':{'filetypes':['coffee']}}
    " NeoBundleLazy 'mmalecki/vim-node.js', {'autoload':{'filetypes':['javascript']}}
    " NeoBundleLazy 'leshill/vim-json', {'autoload':{'filetypes':['javascript','json']}}
    NeoBundleLazy 'othree/javascript-libraries-syntax.vim', {'autoload':{'filetypes':['javascript','coffee','ls','typescript']}}
  endif "}}}

  if count(s:settings.plugin_groups, 'ruby') "{{{
    NeoBundle 'tpope/vim-rails'
    NeoBundle 'tpope/vim-bundler'
  endif "}}}

  if count(s:settings.plugin_groups, 'python') "{{{
    NeoBundleLazy 'klen/python-mode', {'autoload':{'filetypes':['python']}} "{{{
      let g:pymode_rope=0
    "}}}
    NeoBundleLazy 'davidhalter/jedi-vim', {'autoload':{'filetypes':['python']}} "{{{
      let g:jedi#popup_on_dot=0
    "}}}
  endif "}}}

  if count(s:settings.plugin_groups, 'scm') "{{{
    " NeoBundle 'sjl/splice.vim'
    NeoBundle 'mhinz/vim-signify' "{{{
      let g:signify_update_on_bufenter=0
    "}}}
    NeoBundle 'tpope/vim-fugitive' "{{{
      " Fugitive : Git support
      " Adds pervasive git support to git directories in vim. 
      " For more information, use :help fugitive
      " Use :Gstatus to view git status and type - on any file to stage or unstage it.
      " Type p on a file to enter git add -p and stage specific hunks in the file.
      " Use :Gdiff on an open file to see what changes have been made to that file
      " :Git add %      :Gwrite  : Stage the current file to the index
      " :Git checkout % :Gread   : Revert current file to last checked in version
      " :Git rm %       :Gremove : Delete the current file and the corresponding Vim buffer
      " :Git mv %       :Gmove   : Rename the current file and the corresponding Vim buffer
      " :Git blame %    :Gblame  : Git blame

      " nnoremap <silent> <leader>gs :Gstatus<CR>
      " nnoremap <silent> <leader>gd :Gdiff<CR>
      " nnoremap <silent> <leader>gc :Gcommit<CR>
      " nnoremap <silent> <leader>gb :Gblame<CR>
      " nnoremap <silent> <leader>gl :Glog<CR>
      " nnoremap <silent> <leader>gp :Git push<CR>
      " nnoremap <silent> <leader>gw :Gwrite<CR>
      " nnoremap <silent> <leader>gr :Gremove<CR>
      autocmd FileType gitcommit nmap <buffer> U :Git checkout -- <C-r><C-g><CR>
      autocmd BufReadPost fugitive://* set bufhidden=delete
    "}}}
    NeoBundleLazy 'gregsexton/gitv', {'depends':['tpope/vim-fugitive'], 'autoload':{'commands':'Gitv'}} "{{{
      nnoremap <silent> <leader>gv :Gitv<CR>
      nnoremap <silent> <leader>gV :Gitv!<CR>
    "}}}
  endif "}}}

  if count(s:settings.plugin_groups, 'autocomplete') "{{{
    " Pick one of these combinations: in the following priority
    " 1. youcompleteme + ultisnips if you have python enabled and a new enough version of vim
    " 2. neocomplete + neosnippet if you have lua enabled and a new enough version of vim
    " 3. neocomplcache + neosnippet if you only have vimscript available
    NeoBundle 'honza/vim-snippets'
    if s:settings.autocomplete_method == 'ycm' "{{{
      NeoBundle 'Valloric/YouCompleteMe' "{{{
        let g:ycm_complete_in_comments_and_strings=1
        let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
        let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']
        let g:ycm_filetype_blacklist={'unite': 1}
      "}}}
      NeoBundle 'SirVer/ultisnips' "{{{
        let g:UltiSnipsExpandTrigger="<tab>"
        let g:UltiSnipsJumpForwardTrigger="<tab>"
        let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
        let g:UltiSnipsSnippetsDir='~/.vim/snippets'
      "}}}
    else
      NeoBundle 'Shougo/neosnippet.vim' "{{{
        let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets,~/.vim/snippets'
        let g:neosnippet#enable_snipmate_compatibility=1

        imap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ? "\<C-n>" : "\<TAB>")
        smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
        imap <expr><S-TAB> pumvisible() ? "\<C-p>" : ""
        smap <expr><S-TAB> pumvisible() ? "\<C-p>" : ""
      "}}}
    endif "}}}
    if s:settings.autocomplete_method == 'neocomplete' "{{{
      NeoBundleLazy 'Shougo/neocomplete.vim', {'autoload':{'insert':1}} "{{{
        let g:neocomplete#enable_at_startup=1
        let g:neocomplete#data_directory='~/.vim/.cache/neocomplete'
        let g:neocomplete#enable_auto_delimiter=1
        let g:neocomplete#enable_refresh_always=1
      "}}}
    endif "}}}
    if s:settings.autocomplete_method == 'neocomplcache' "{{{
      NeoBundleLazy 'Shougo/neocomplcache.vim', {'autoload':{'insert':1}} "{{{
        let g:neocomplcache_enable_at_startup=1
        let g:neocomplcache_enable_auto_delimiter=1
        " let g:neocomplcache_force_overwrite_completefunc=1
        " let g:neocomplcache_auto_completion_start_length=1
        let g:neocomplcache_max_list=10
        let g:neocomplcache_temporary_dir='~/.vim/.cache/neocon'
        " let g:neocomplcache_enable_auto_select=1
        " let g:neocomplcache_enable_cursor_hold_i=1
        " let g:neocomplcache_cursor_hold_i_time=300
        let g:neocomplcache_enable_fuzzy_completion=1

        if !exists('g:neocomplcache_omni_functions')
          let g:neocomplcache_omni_functions = {}
        endif

        " enable general omni completion
        let g:neocomplcache_omni_functions.css      = 'csscomplete#CompleteCSS'
        let g:neocomplcache_omni_functions.html     = 'htmlcomplete#CompleteTags'
        let g:neocomplcache_omni_functions.markdown = 'htmlcomplete#CompleteTags'
        let g:neocomplcache_omni_functions.python   = 'pythoncomplete#Complete'
        let g:neocomplcache_omni_functions.xml      = 'xmlcomplete#CompleteTags'
        let g:neocomplcache_omni_functions.ruby     = 'rubycomplete#Complete'
      "}}}
    endif "}}}
  endif "}}}

  if count(s:settings.plugin_groups, 'editing') "{{{
    " NeoBundleLazy 'editorconfig/editorconfig-vim', {'autoload':{'insert':1}}
    " NeoBundle 'tpope/vim-speeddating'
    NeoBundle 'tpope/vim-endwise'
    NeoBundle 'terryma/vim-expand-region' " Press + to expand the visual selection and _ to shrink it.
    " NeoBundle 'terryma/vim-multiple-cursors'
    " NeoBundle 'chrisbra/NrrwRgn'
    NeoBundle 'dahu/vim-fanfingtastic'
    NeoBundleLazy 'godlygeek/tabular', {'autoload':{'commands':'Tabularize'}} "{{{ 
      "Aligning text
      nmap <Leader>a& :Tabularize /&<CR>
      vmap <Leader>a& :Tabularize /&<CR>
      nmap <Leader>a= :Tabularize /=<CR>
      vmap <Leader>a= :Tabularize /=<CR>
      nmap <Leader>a: :Tabularize /:<CR>
      vmap <Leader>a: :Tabularize /:<CR>
      nmap <Leader>a:: :Tabularize /:\zs<CR>
      vmap <Leader>a:: :Tabularize /:\zs<CR>
      nmap <Leader>a, :Tabularize /,<CR>
      vmap <Leader>a, :Tabularize /,<CR>
      nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
      vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
    "}}}
    NeoBundle 'Raimondi/delimitMate' "{{{
     let delimitMate_expand_cr=1
     autocmd FileType markdown,vim let b:loaded_delimitMate=1
    "}}}
    NeoBundle 'skwp/vim-easymotion' "{{{
      " NeoBundle 'Lokaltog/vim-easymotion'
      let g:EasyMotion_keys = 'asdfghjklqwertyuiopzxcvbnm'

      autocmd ColorScheme * highlight EasyMotionTarget ctermfg=32 guifg=#0087df
      autocmd ColorScheme * highlight EasyMotionShade ctermfg=237 guifg=#3a3a3a
    "}}}

    NeoBundle 'tomtom/tcomment_vim' "{{{
      map <D-/> gccj
      vmap <D-/> gc
      imap <D-/> <Esc>gccj
    "}}}
  endif "}}}

  if count(s:settings.plugin_groups, 'navigation') "{{{
    " NeoBundleLazy 'mbbill/undotree', {'autoload':{'commands':'UndotreeToggle'}} "{{{
      " let g:undotree_SplitLocation='botright'
      " let g:undotree_SetFocusWhenToggle=1
      " nnoremap <silent> <F5> :UndotreeToggle<CR>
    " "}}}
    " NeoBundleLazy 'EasyGrep', {'autoload':{'commands':'GrepOptions'}} "{{{
      " let g:EasyGrepRecursive=1
      " let g:EasyGrepAllOptionsInExplorer=1
      " let g:EasyGrepCommand=1
      " nnoremap <leader>vo :GrepOptions<cr>
    " "}}}
    " NeoBundle 'Shougo/vimfiler.vim' "{{{
    "   let g:vimfiler_as_default_explorer=1
    "   let g:vimfiler_data_directory='~/.vim/.cache/vimfiler'
    "   nnoremap <F2> :VimFilerExplorer<CR>
    "   nnoremap <F3> :VimFilerBufferDir --explorer<CR>
    " "}}}
    NeoBundleLazy 'scrooloose/nerdtree', {'autoload':{'commands':['NERDTreeToggle','NERDTreeFind']}} "{{{
      " let NERDTreeShowHidden=1
      " let NERDTreeQuitOnOpen=0
      " let NERDTreeShowLineNumbers=1
      " let NERDTreeChDirMode=0
      " let NERDTreeShowBookmarks=1
      let NERDTreeIgnore=['\.git','\.hg']
      " let NERDTreeBookmarksFile='~/.vim/.cache/NERDTreeBookmarks'
      nnoremap <F2> :NERDTreeToggle<CR>
      nnoremap <F3> :NERDTreeFind<CR>
    "}}}
    NeoBundleLazy 'majutsushi/tagbar', {'autoload':{'commands':'TagbarToggle'}} "{{{
      nnoremap <silent> <F9> :TagbarToggle<CR>
    "}}}
  endif "}}}

  if count(s:settings.plugin_groups, 'unite') "{{{
    NeoBundle 'Shougo/unite.vim', {'autoload':{'commands':'Unite'}} "{{{
      let bundle = neobundle#get('unite.vim')
      function! bundle.hooks.on_source(bundle)
        call unite#filters#matcher_default#use(['matcher_fuzzy'])
        call unite#filters#sorter_default#use(['sorter_rank'])
        call unite#set_profile('files', 'smartcase', 1)
        call unite#custom#source('line,outline','matchers','matcher_fuzzy')
      endfunction

      let g:unite_data_directory='~/.vim/.cache/unite'
      let g:unite_enable_start_insert=1
      let g:unite_source_history_yank_enable=1
      let g:unite_source_rec_max_cache_files=5000
      let g:unite_prompt='» '

      if executable('ag')
        let g:unite_source_grep_command='ag'
        let g:unite_source_grep_default_opts='--nocolor --nogroup --hidden --ignore-case'
        let g:unite_source_grep_recursive_opt=''
      elseif executable('ack')
        let g:unite_source_grep_command='ack'
        let g:unite_source_grep_default_opts='--no-heading --no-color -a'
        let g:unite_source_grep_recursive_opt=''
      endif

      function! s:unite_settings()
        nmap <buffer> Q <plug>(unite_exit)
        nmap <buffer> <esc> <plug>(unite_exit)
        imap <buffer> <esc> <plug>(unite_exit)
      endfunction
      autocmd FileType unite call s:unite_settings()

      nmap <space> [unite]
      nnoremap [unite] <nop>

      if s:is_windows
        nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed file_rec buffer file_mru bookmark<cr><c-u>
        nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec<cr><c-u>
      else
        nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed file_rec/async buffer file_mru bookmark<cr><c-u>
        nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async<cr><c-u>
      endif
      nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
      nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line line<cr>
      nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers buffer<cr>
      nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
      nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
      nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>
      map <C-p> [unite]f
    "}}}
    " NeoBundleLazy 'tsukkee/unite-tag', {'autoload':{'unite_sources':['tag','tag/file']}} "{{{
    "   nnoremap <silent> [unite]t :<C-u>Unite -auto-resize -buffer-name=tags tags tags/file<cr>
    " "}}}
    " NeoBundleLazy 'Shougo/unite-outline', {'autoload':{'unite_sources':'outline'}} "{{{
    "   nnoremap <silent> [unite]o :<C-u>Unite -auto-resize -buffer-name=outline outline<cr>
    " "}}}
    " NeoBundleLazy 'Shougo/junkfile.vim', {'autoload':{'commands':'JunkfileOpen','unite_sources':['junkfile','junkfile/new']}} "{{{
      " let g:junkfile#directory=expand("~/.vim/.cache/junk")
      " nnoremap <silent> [unite]j :<C-u>Unite -auto-resize -buffer-name=junk junkfile junkfile/new<cr>
    " "}}}
  endif "}}}

  if count(s:settings.plugin_groups, 'visual') "{{{
    " NeoBundle 'Lokaltog/vim-powerline' "{{{
    "   let g:Powerline_symbols = 'unicode'
    " "}}}
    " NeoBundle 'Lokaltog/powerline', { 'rtp': 'powerline/bindings/vim' }
    " NeoBundle 'zhaocai/linepower.vim'
    " NeoBundle 'myusuf3/numbers.vim', { 'gui': 1 }

    " a plugin to place, toggle and display marks
    NeoBundle 'kshenoy/vim-signature'

    " Zoomwin
    " NeoBundle 'ZoomWin'
    " noremap <LocalLeader>o :ZoomWin<CR>
    " vnoremap <LocalLeader>o <C-C>:ZoomWin<CR>
    " inoremap <LocalLeader>o <C-O>:ZoomWin<CR>
    " noremap <C-W>+o :ZoomWin<CR>

  endif "}}}

  if count(s:settings.plugin_groups, 'indents') "{{{
    NeoBundle 'nathanaelkane/vim-indent-guides' "{{{
      let g:indent_guides_start_level=2
      " let g:indent_guides_guide_size=1
      " let g:indent_guides_enable_on_vim_startup=1
      " let g:indent_guides_color_change_percent=3
      " if !has('gui_running')
      "   let g:indent_guides_auto_colors=0
      "   function! s:indent_set_console_colors()
      "     hi IndentGuidesOdd ctermbg=235
      "     hi IndentGuidesEven ctermbg=236
      "   endfunction
      "   autocmd VimEnter,Colorscheme * call s:indent_set_console_colors()
      " endif
    "}}}
  endif "}}}

  if count(s:settings.plugin_groups, 'misc') "{{{
    NeoBundle 'bufkill.vim'
    " NeoBundle 'mhinz/vim-startify' "{{{
    "  let g:startify_session_dir = '~/.vim/.cache/sessions'
    "  let g:startify_show_sessions = 1
    "  nnoremap <F1> :Startify<cr>
    " "}}}

    NeoBundle 'scrooloose/syntastic' "{{{
      " Syntastic : Syntastic is a syntax checking plugin that runs buffers through 
      " external syntax checkers as they are saved and opened. If syntax errors are 
      " detected, the user is notified and is happy because they didn't have to 
      " compile their code or execute their script to find them.
      let g:syntastic_error_symbol = '✗'
      let g:syntastic_style_error_symbol = '✠'
      let g:syntastic_warning_symbol = '∆'
      let g:syntastic_style_warning_symbol = '≈'
      " let g:syntastic_enable_signs=1
      " let g:syntastic_auto_loc_list=2
    "}}}

    " NeoBundleLazy 'Shougo/vimshell.vim', {'autoload':{'commands':'VimShell'}} "{{{
    "   if s:is_macvim
    "     let g:vimshell_editor_command='mvim'
    "   else
    "     let g:vimshell_editor_command='vim'
    "   endif
    "   let g:vimshell_right_prompt='getcwd()'
    "   let g:vimshell_temporary_directory='~/.vim/.cache/vimshell'
    "   let g:vimshell_vimshrc_path='~/.vim/vimshrc'

    "   nnoremap <leader>c :VimShell -split<cr>
    " "}}}
    " NeoBundleLazy 'roman/golden-ratio', {'autoload':{'commands':'GoldenRatioToggle'}} "{{{
    "   let g:golden_ratio_autocommand=0
    "   let g:golden_ratio_wrap_ignored=0
    "   nnoremap <F4> :GoldenRatioToggle<cr>
    " "}}}
  endif "}}}

  if count(s:settings.plugin_groups, 'windows') "{{{
    NeoBundleLazy 'PProvost/vim-ps1', {'autoload':{'filetypes':['ps1']}} "{{{
      autocmd BufNewFile,BufRead *.ps1,*.psd1,*.psm1 setlocal ft=ps1
    "}}}
    NeoBundleLazy 'nosami/Omnisharp', {'autoload':{'filetypes':['cs']}}
  endif "}}}

" ================ }}}


" ============================= End NeoBundle {{{

  filetype plugin indent on     " Required!

  "
  " Brief help
  " :NeoBundleList          - list configured bundles
  " :NeoBundleInstall(!)    - install(update) bundles
  " :NeoBundleClean(!)      - confirm(or auto-approve) removal of unused bundles

  " Installation check.
  NeoBundleCheck
" ================ }}}


" ============================= Visual {{{
  " color schemes {{{
    NeoBundle 'altercation/vim-colors-solarized'
    " NeoBundle 'nanotech/jellybeans.vim'
    NeoBundle 'tomasr/molokai'
    " NeoBundle 'chriskempson/vim-tomorrow-theme'
    " NeoBundle 'chriskempson/base16-vim'
    " NeoBundle 'w0ng/vim-hybrid'
    " NeoBundle 'sjl/badwolf'
    " NeoBundle 'jelera/vim-gummybears-colorscheme'
    " NeoBundle 'zeis/vim-kolor' "{{{
    "   let g:kolor_underlined=1
    " "}}}

    exec 'colorscheme '.s:settings.colorscheme
  "}}}
  "
  set guioptions+=t          " tear off menu items
  set guioptions-=T          " do not show toolbar
  set guioptions+=c          " console dialogs
  set guioptions+=M          " ?
  " set guioptions=egmrLtT   " default


  if has("gui_running")
    " set guifont=Andale\ Mono:h13
    " set guifont=Menlo\ Regular:h12
    set guifont=Menlo\ Regular\ for\ Powerline:h12
    set antialias
    set visualbell
  endif

  set number  " Line numbers on
  set ruler  " Show ruler
  set showmatch  " Show matching brackets.
  set matchtime=5  " Bracket blinking.
  " set novisualbell
  set noerrorbells  " No noise.
  set laststatus=2  " Always show status line.
  " set vb t_vb= " disable any beeps or flashes on error
  " set shortmess=atI " Shortens messages
  set showcmd " Display an incomplete command in the lower right corner of the Vim window
  set showmode    "show current mode down the bottom

" ================ }}}


" ============================= General {{{
  set timeoutlen=500                                  "mapping timeout
  set ttimeoutlen=50                                  "keycode timeout

  set mouse=a           " enable mouse in GUI mode
  set mousehide                                       "hide when characters are typed
  set history=500                                    "number of command lines to remember
  set ttyfast                                         "assume fast terminal connection
  set viewoptions=folds,options,cursor,unix,slash     "unix/windows compatibility
  set encoding=utf-8                                  "set encoding for text
  " if exists('$TMUX')
  "   set clipboard=
  " else
  "   set clipboard+=unnamed                          " Yanks go on OS clipboard instead.
  " endif

  " This makes vim act like all other editors, buffers can
  " exist in the background without being in a window.
  " http://items.sjbach.com/319/configuring-vim-right
  set hidden                                          "allow buffer switching without saving

  set autowrite  " Writes on make/shell commands
  set autoread                                        "auto reload if file saved externally
  set fileformats+=mac                                "add mac to auto-detection of file format line endings
  set nrformats-=octal                                "always assume decimal numbers
  set tags=tags;/
  " set tags=./tags;$HOME " walk directory tree upto $HOME looking for tags
  set showfulltag
  " Modeline
  " set modeline
  " set modelines=5 " default numbers of lines to read for modeline instructions

  if s:is_windows && !s:is_cygwin
    " ensure correct shell in gvim
    set shell=c:\windows\system32\cmd.exe
  endif

  " whitespace
  set backspace=indent,eol,start                      "allow backspacing everything in insert mode
  set autoindent                                      "automatically indent to match adjacent lines

  set cindent
  set cinoptions=:s,ps,ts,cs
  set cinwords=if,else,while,do,for,switch,case
  syntax on         " enable syntax

  " List chars
  set list                          " Show invisible characters
  set listchars=""                  " Reset the listchars
  set listchars=tab:·\              " a tab should display as "· ", trailing whitespace as "."
  set listchars+=trail:•            " show trailing spaces as dots
  set listchars+=extends:»          " The character to show in the last column when wrap is
  " off and the line continues beyond the right of the screen
  set listchars+=precedes:«         " The character to show in the last column when wrap is
  " off and the line continues beyond the right of the screen

  set shiftround
  set linebreak
  set showbreak=↪\ 

  "vertical/horizontal scroll off settings
  set scrolloff=1                                     "always show content after scroll
  set sidescrolloff=7
  set sidescroll=1

  " set scrolljump=5                                    "minimum number of lines to scroll
  set display+=lastline

  set splitbelow
  set splitright

  " Folding
  set foldenable " Turn on folding
  set foldmethod=syntax " Fold on the syntax/indent/marker
  set foldlevel=1 " Don't autofold anything (but I can still fold manually)
  " set foldopen=block,hor,mark,percent,quickfix,tag " what movements open folds 
  " nnoremap <space> @=((foldclosed(line(".")) < 0) ? 'zc' : 'zO')<cr>

  set pastetoggle=<F10> "  toggle between paste and normal: for 'safer' pasting from keyboard

  " searching
  set hlsearch                                        "highlight searches
  set incsearch                                       "incremental searching
  set ignorecase                                      "ignore case for searching
  set smartcase                                       "do case-sensitive if there's a capital letter
  if executable('ack')
    set grepprg=ack\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow\ $*
    set grepformat=%f:%l:%c:%m
  endif
  if executable('ag')
    set grepprg=ag\ --nogroup\ --column\ --smart-case\ --nocolor\ --follow
    set grepformat=%f:%l:%c:%m
  endif

  " vim file/folder management {{{
    " persistent undo
    if exists('+undofile')
      set undofile
      set undodir=~/.vim/.cache/undo
    endif

    " backups
    set backup
    set backupdir=~/.vim/.cache/backup

    " swap files
    set directory=~/.vim/.cache/swap
    set noswapfile

    call EnsureExists('~/.vim/.cache')
    call EnsureExists(&undodir)
    call EnsureExists(&backupdir)
    call EnsureExists(&directory)

  "}}}

  " autocmd {{{
    " go back to previous position of cursor if any
    autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \  exe 'normal! g`"zvzz' |
      \ endif

    " remove trailing whitespace on save.
    " http://stackoverflow.com/questions/356126/how-can-you-automatically-remove-trailing-whitespace-in-vim/1618401#1618401
    autocmd FileType c,cpp,java,php,ruby,python,js,scss,css autocmd BufWritePre <buffer> call StripTrailingWhitespace()

    autocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}
    autocmd FileType css,scss nnoremap <silent> <leader>S vi{:sort<CR>
    autocmd FileType python setlocal foldmethod=indent
    autocmd FileType markdown setlocal nolist
    autocmd FileType vim set keywordprg=":help"
  "}}}
  syntax enable         " Turn on syntax highlighting allowing local overrides

" ================ }}}


" ============================= Formatting {{{
  " set fo-=o " Do not insert the current comment leader after hitting 'o' or 'O' in Normal mode.
  " set fo-=r " Do not automatically insert a comment leader after an enter
  " set fo-=t " Do no auto-wrap text using textwidth (does not apply to comments)
  autocmd FileType * setlocal formatoptions-=o

  set nowrap
  set textwidth=0   " Don't wrap lines by default

  " set softtabstop=2
  " set shiftwidth=2  " Set the default shift width for indents

  set smartindent                                     "smart indenting for additional languages
  set expandtab                                       "spaces instead of tabs
  set smarttab                                        "use shiftwidth to enter tabs
  let &tabstop=s:settings.default_indent              "number of spaces per tab for display
  let &softtabstop=s:settings.default_indent          "number of spaces per tab in insert mode
  let &shiftwidth=s:settings.default_indent           "number of spaces when indenting

  "" Wild settings
  "
  set wildmenu                                        "show list for autocomplete
  set wildmode=list:longest:full                      "priority for tab completion
  " set wildmode=longest,list:full    " At command line, complete longest common string, then list alternatives.
  " Disable output and VCS files
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.idea/*,*/.DS_Store
  set wildignore+=*.o,*.out,*.obj,*.rbc,*.rbo,*.class,*.gem
  " Disable archive files
  set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
  " Ignore bundler and sass cache
  set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
  " Disable temp and backup files
  set wildignore+=*.swp,*~,._*

  " command to strip white space from any file
  nnoremap <leader>s :call <SID>StripTrailingWhitespaces()<cr>

" ================ }}}


" ============================= Mapping {{{

  "make Y consistent with C and D
  nnoremap Y y$

  " Toggle paste mode
  nmap <silent> <F8> :set invpaste<CR>:set paste?<CR>
  imap <silent> <F8> <ESC>:set invpaste<CR>:set paste?<CR>

  " format the entire file
  nmap <leader>fef ggVG=

  " upper/lower word
  nmap <leader>u mQviwU`Q
  nmap <leader>l mQviwu`Q

  " upper/lower first char of word
  nmap <leader>U mQgewvU`Q
  nmap <leader>L mQgewvu`Q

  " smash escape
  " inoremap jk <esc>
  " inoremap kj <esc>

  if has("gui_macvim") && has("gui_running")
    " Map command-[ and command-] to indenting or outdenting
    " while keeping the original selection in visual mode
    vmap <D-]> >gv
    vmap <D-[> <gv

    nmap <D-]> >>
    nmap <D-[> <<

    omap <D-]> >>
    omap <D-[> <<

    imap <D-]> <Esc>>>i
    imap <D-[> <Esc><<i

    " Bubble single lines
    nmap <D-Up> [e
    nmap <D-Down> ]e
    nmap <D-k> [e
    nmap <D-j> ]e

    " Bubble multiple lines
    vmap <D-Up> [egv
    vmap <D-Down> ]egv
    vmap <D-k> [egv
    vmap <D-j> ]egv
  else
    " Map command-[ and command-] to indenting or outdenting
    " while keeping the original selection in visual mode
    vmap <A-]> >gv
    vmap <A-[> <gv

    nmap <A-]> >>
    nmap <A-[> <<

    omap <A-]> >>
    omap <A-[> <<

    imap <A-]> <Esc>>>i
    imap <A-[> <Esc><<i

    " Bubble single lines
    nmap <C-Up> [e
    nmap <C-Down> ]e
    nmap <C-k> [e
    nmap <C-j> ]e

    " Bubble multiple lines
    vmap <C-Up> [egv
    vmap <C-Down> ]egv
    vmap <C-k> [egv
    vmap <C-j> ]egv

    " Make shift-insert work like in Xterm
    map <S-Insert> <MiddleMouse>
    map! <S-Insert> <MiddleMouse>
  endif

  " Make Control-direction switch between windows (like C-W h, etc)
  nmap <silent> <C-k> <C-W><C-k>
  nmap <silent> <C-j> <C-W><C-j>
  nmap <silent> <C-h> <C-W><C-h>
  nmap <silent> <C-l> <C-W><C-l>

  " http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
  " Don't screw up folds when inserting text that might affect them, until
  " leaving insert mode. Foldmethod is local to the window. Protect against
  " screwing up folding when switching between windows.
  autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod | setlocal foldmethod=manual | endif
  autocmd InsertLeave,WinLeave * if exists('w:last_fdm') | let &l:foldmethod=w:last_fdm | unlet w:last_fdm | endif

  " change cursor position in insert mode
  inoremap <C-h> <left>
  inoremap <C-l> <right>

  " if has("gui_macvim") && has("gui_running")
  "   set noballooneval " Disable anoying mouse over tooltip
  "   " verb set ballooneval?
  "   set balloondelay=100000
  "   setlocal balloonexpr=
  " endif

  " sane regex {{{
    " http://learnvimscriptthehardway.stevelosh.com/chapters/31.html
    nnoremap / /\v
    vnoremap / /\v
    nnoremap ? ?\v
    vnoremap ? ?\v
    cnoremap s/ s/\v
  "}}}

  " folds {{{
    nnoremap zr zr:echo &foldlevel<cr>
    nnoremap zm zm:echo &foldlevel<cr>
    nnoremap zR zR:echo &foldlevel<cr>
    nnoremap zM zM:echo &foldlevel<cr>
  " }}}

  " screen line scroll
  " Map the arrow keys to be based on display lines, not physical lines
  map <Down> gj
  map <Up> gk
  nnoremap <silent> j gj
  nnoremap <silent> k gk

  " auto center {{{
    nnoremap <silent> n nzz
    nnoremap <silent> N Nzz
    nnoremap <silent> * *zz
    nnoremap <silent> # #zz
    nnoremap <silent> g* g*zz
    nnoremap <silent> g# g#zz
    nnoremap <silent> <C-o> <C-o>zz
    nnoremap <silent> <C-i> <C-i>zz
  "}}}

  " reselect last paste
  nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'

  " window killer
  nnoremap <silent> Q :call CloseWindowOrKillBuffer()<cr>

  " quick buffer open
  nnoremap gb :ls<cr>:e #

  if neobundle#is_sourced('vim-dispatch')
    nnoremap <leader>tag :Dispatch ctags -R<cr>
  endif

" ================ }}}
